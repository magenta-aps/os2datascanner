version: '3.4'
services:
  db:
    image: postgres:12
    env_file:
      - dev-environment/admin/db.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres-initdb.d/20-create-db-and-user.sh:/docker-entrypoint-initdb.d/20-create-db-and-user.sh

  queue:
    # Normally, we expect the `rabbitmq` image. The -management images come
    # with a set of management plugins installed and enabled by default. They
    # can be accessed through the web interface on port 15672. The credentials
    # are given in the specified `rabbitmq.env` file.
    image: rabbitmq:3-management-alpine
    hostname: os2datascanner_msg_broker
    env_file:
      - dev-environment/rabbitmq.env
    ports:
      - "5672:5672"
      - "8080:15672"

  admin-frontend:
    build:
      context: .
      dockerfile: docker/admin/Dockerfile
      target: frontend
    volumes:
      - frontend-bundles:/code/src/os2datascanner/projects/admin/adminapp/static/dist/
      - /code/frontend/mode_modules

  admin-application:
    build:
      context: .
      dockerfile: docker/admin/Dockerfile
      target: application
    env_file:
      - dev-environment/admin/django.env
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - frontend-bundles:/code/src/os2datascanner/projects/admin/adminapp/static/dist/
      - ./dev-environment/admin/dev-settings.toml:/user-settings.toml
      - ./dev-environment/admin/dev-settings.py:/code/src/os2datascanner/projects/admin/local_settings.py
      - ./src/os2datascanner:/code/src/os2datascanner
    ports:
      - "8000:8000"
    depends_on:
      - db
      - admin-frontend

  engine_explorer:
    build:
      context: .
      dockerfile: docker/engine/Dockerfile
      target: engine
    environment:
      - AMQP_HOST=queue
    command: explorer
    depends_on:
      - queue

  engine_processor:
    build:
      context: .
      dockerfile: docker/engine/Dockerfile
      target: engine
    environment:
      - AMQP_HOST=queue
    command: processor
    depends_on:
      - queue

  engine_matcher:
    build:
      context: .
      dockerfile: docker/engine/Dockerfile
      target: engine
    environment:
      - AMQP_HOST=queue
    command: matcher
    depends_on:
      - queue

  engine_tagger:
    build:
      context: .
      dockerfile: docker/engine/Dockerfile
      target: engine
    environment:
      - AMQP_HOST=queue
    command: tagger
    depends_on:
      - queue

  engine_exporter:
    build:
      context: .
      dockerfile: docker/engine/Dockerfile
      target: engine
    environment:
      - AMQP_HOST=queue
    command: exporter
    depends_on:
      - queue

volumes:
  frontend-bundles:
  postgres-data:
  postgres-initdb.d:
