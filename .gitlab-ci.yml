stages:
  - lint
  - build
  - test


variables:
  REPORT_IMAGE: ${CI_REGISTRY_IMAGE}/report:${CI_COMMIT_SHA}
  ADMIN_IMAGE: ${CI_REGISTRY_IMAGE}/admin:${CI_COMMIT_SHA}
  ENGINE_IMAGE: ${CI_REGISTRY_IMAGE}/engine:${CI_COMMIT_SHA}


# Lint stage
#############

.lint-default: &lint-default
  stage: lint
  needs: []
  services: []
  tags:
    - docker
  allow_failure: false

Lint Python:
  <<: *lint-default
  image: python:3.6
  before_script:
    - pip install flake8 flake8-gl-codeclimate black
  script:
    - black --check src
    - flake8 --version
    - flake8 --format gl-codeclimate --tee --output-file build/code-quality.json src/
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
    paths:
      - build/code-quality.json
    reports:
      codequality: build/code-quality.json

Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint

Lint shell scripts:
  <<: *lint-default
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk update
    - apk add git
  script:
    - git ls-files --exclude='*.sh' --ignored | xargs shellcheck


# Build stage
##############

.build-default: &build-default
  stage: build
  needs: []
  services: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0
    # contains fatal bugs.
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  tags:
    - docker
  allow_failure: false

Build Report Application:
  <<: *build-default
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/report/Dockerfile
      --destination=${REPORT_IMAGE}

Build Admin Application:
  <<: *build-default
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/admin/Dockerfile
      --destination=${ADMIN_IMAGE}

Build Engine:
  <<: *build-default
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/engine/Dockerfile
      --destination=${ENGINE_IMAGE}

Build documentation:
  <<: *build-default
  image: keimlink/sphinx-doc:latex
  script:
    - make -C doc PAPER=a4 html latexpdf
    - mv doc/_build .
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
    paths:
      - _build


# Test stage
#############

.test-default: &test-default
  stage: test
  tags:
    - docker
    - network-per-build
  services:
    - postgres:12
    - rabbitmq:3-alpine
  image:
    name: ${ADMIN_IMAGE}
  variables:
    POSTGRES_DB: os2datascanner_admin
    POSTGRES_USER: os2datascanner_admin
    POSTGRES_PASSWORD: os2datascanner_admin
    POSTGRES_HOST: postgres
    AMQP_HOST: rabbitmq
    AMQP_USER: guest
    AMQP_PWD: guest
    DJANGO_SETTINGS_MODULE: os2datascanner.projects.admin.settings
    SECRET_KEY: TestDummy!TestDummy!TestDummy!TestDummy!TestDummy!
    COVERAGE_FILE: $CI_PROJECT_DIR/.coverage
  allow_failure: false

Unit-test:
  <<: *test-default
  needs:
    - Build Admin Application
  script:
    - coverage run --source=os2datascanner.engine2,os2datascanner.projects,os2datascanner.utils,os2datascanner.tests -m django test os2datascanner.tests
  after_script:
    - coverage html -d ${CI_PROJECT_DIR}/coverage-html
    - coverage xml -o ${CI_PROJECT_DIR}/junit.xml
    - coverage report
  coverage: '/^TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+(\d+(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage-html
    reports:
      junit: $CI_PROJECT_DIR/junit.xml

Run notice scripts:
  <<: *test-default
  needs:
    - Build Engine
  script:
    - python -m unittest discover -s src/ -p notice*.py
  allow_failure: true
